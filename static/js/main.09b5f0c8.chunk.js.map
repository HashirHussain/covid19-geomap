{"version":3,"sources":["map-style.js","information-panel.js","App.js","utils.js","serviceWorker.js","index.js"],"names":["dataLayer","id","type","paint","property","stops","InformationPanel","props","state","isOpen","_toggleMenu","bind","this","setState","Fragment","className","onClick","style","background","color","rel","href","target","PureComponent","getCovid19Data","a","fetch","response","json","defaultViewport","width","height","latitude","longitude","zoom","bearing","pitch","App","_loadData","data","_setViewport","viewport","_onHover","event","features","srcEvent","offsetX","offsetY","hoveredFeature","find","f","layer","x","y","requestJson","error","geoData","then","covid19Data","domains","locations","forEach","location","hasOwnProperty","country_code","confirmed","latest","deaths","last_updated","getDomain","scale","scaleQuantile","domain","Object","keys","map","key","range","properties","ISO_A2","name","ADMIN","hasRecords","percentile","updatePercentiles","_date","Date","left","top","toUTCString","position","mapboxApiAccessToken","process","onViewportChange","onHover","_renderTooltip","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.09b5f0c8.chunk.js","sourcesContent":["// For more information on data-driven styles, see https://www.mapbox.com/help/gl-dds-ref/\r\nexport const dataLayer = {\r\n  id: \"data\",\r\n  type: \"fill\",\r\n  paint: {\r\n    \"fill-color\": {\r\n      property: \"percentile\",\r\n      stops: [\r\n        [0, \"#3288bd\"],\r\n        [1, \"#66c2a5\"],\r\n        [2, \"#abdda4\"],\r\n        [3, \"#e6f598\"],\r\n        [4, \"#ffffbf\"],\r\n        [5, \"#fee08b\"],\r\n        [6, \"#fdae61\"],\r\n        [7, \"#f46d43\"],\r\n        [8, \"#d53e4f\"],\r\n      ],\r\n    },\r\n    \"fill-opacity\": 0.6,\r\n  },\r\n};\r\n","import React, { PureComponent } from \"react\";\r\nimport { FaInfo, FaTimes } from 'react-icons/fa';\r\n\r\nexport default class InformationPanel extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isOpen: false\r\n    }\r\n\r\n    this._toggleMenu = this._toggleMenu.bind(this);\r\n  }\r\n  _toggleMenu() {\r\n      this.setState({isOpen: !this.state.isOpen});\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"information-icon\" onClick={this._toggleMenu}>\r\n          {this.state.isOpen ? <FaTimes/> : <FaInfo/>}\r\n        </div>\r\n        {this.state.isOpen ? <div className=\"information-panel\">\r\n        <h4>COVID19 geographical outbreaks Country wise</h4>\r\n        <ul>\r\n          <li style={{ background: \"#d53e4f\" }}>Highest confirmed cases</li>\r\n          <li style={{ background: \"#f46d43\" }}>&nbsp;</li>\r\n          <li style={{ background: \"#fee08b\" }}>&nbsp;</li>\r\n          <li style={{ background: \"#ffffbf\", color: \"#908a8a\" }}>\r\n            outbreak situation start\r\n          </li>\r\n          <li style={{ background: \"#e6f598\" }}>&nbsp;</li>\r\n          <li style={{ background: \"#abdda4\" }}>&nbsp;</li>\r\n          <li style={{ background: \"#66c2a5\" }}>&nbsp;</li>\r\n          <li style={{ background: \"#3288bd\" }}>Lowest confirmed cases</li>\r\n          <li style={{ background: \"#000000\" }}>Records not available</li>\r\n        </ul>\r\n        <p>\r\n          Developed by{\" \"}\r\n          <a\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://www.linkedin.com/in/hashir-hussain/\"\r\n            target=\"_blank\"\r\n          >\r\n            Hashir Hussain\r\n          </a>\r\n        </p>\r\n      </div> : <div/>}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ReactMapGL, { Source, Layer } from \"react-map-gl\";\r\nimport { json as requestJson } from \"d3-request\";\r\n\r\nimport { dataLayer } from \"./map-style.js\";\r\nimport InformationPanel from \"./information-panel\";\r\nimport { updatePercentiles } from \"./utils\";\r\n\r\nconst getCovid19Data = async () => {\r\n  const response = await fetch(\r\n    \"https://coronavirus-tracker-api.herokuapp.com/v2/locations?timelines=0\"\r\n  );\r\n  return response.json();\r\n};\r\n\r\nconst defaultViewport = {\r\n  width: \"100%\",\r\n  height: \"100vh\",\r\n  latitude: 21,\r\n  longitude: 78,\r\n  zoom: 2,\r\n  bearing: 0,\r\n  pitch: 0,\r\n};\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: null,\r\n      hoveredFeature: null,\r\n      viewport: defaultViewport,\r\n    };\r\n\r\n    this._setViewport = this._setViewport.bind(this);\r\n    this._onHover = this._onHover.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    requestJson(\r\n      \"https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson\",\r\n      (error, geoData) => {\r\n        if (!error) {\r\n          getCovid19Data().then((covid19Data) => {\r\n            const data = updatePercentiles(geoData, covid19Data);\r\n            this._loadData(data);\r\n          });\r\n        }\r\n      }\r\n    );\r\n  }\r\n  _loadData = (data) => this.setState({ data });\r\n\r\n  _setViewport = (viewport) => this.setState({ viewport });\r\n\r\n  _onHover = (event) => {\r\n    const {\r\n      features,\r\n      srcEvent: { offsetX, offsetY },\r\n    } = event;\r\n    const hoveredFeature =\r\n      features && features.find((f) => f.layer.id === \"data\");\r\n\r\n    this.setState({ hoveredFeature, x: offsetX, y: offsetY });\r\n  };\r\n\r\n  _renderTooltip() {\r\n    const { hoveredFeature, x, y } = this.state;\r\n    if (hoveredFeature) {\r\n      if (hoveredFeature.properties.hasRecords) {\r\n        const {\r\n          name,\r\n          confirmed,\r\n          deaths,\r\n          last_updated,\r\n        } = hoveredFeature.properties;\r\n        var _date = new Date(last_updated);\r\n        return (\r\n          hoveredFeature && (\r\n            <div className=\"tooltip\" style={{ left: x, top: y }}>\r\n              <div>Country: {name}</div>\r\n              <div>Confirmed Cases: {confirmed}</div>\r\n              <div>Deaths: {deaths}</div>\r\n              <div>Last Update: {_date.toUTCString()}</div>\r\n            </div>\r\n          )\r\n        );\r\n      } else {\r\n        return (\r\n          <div className=\"tooltip\" style={{ left: x, top: y }}>\r\n            Records not found for {hoveredFeature.properties.name}\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { viewport, data } = this.state;\r\n    if (!data) {\r\n      return (\r\n        <div>\r\n          Fetching records, this may take few seconds for the first time...\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div style={{ height: \"100vh\", position: \"relative\" }}>\r\n        <ReactMapGL\r\n          mapboxApiAccessToken={process.env.REACT_APP_MapboxAccessToken}\r\n          {...viewport}\r\n          onViewportChange={this._setViewport}\r\n          onHover={this._onHover}\r\n        >\r\n          <Source type=\"geojson\" data={data}>\r\n            <Layer {...dataLayer} />\r\n          </Source>\r\n          {this._renderTooltip()}\r\n        </ReactMapGL>\r\n        <InformationPanel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import {range} from 'd3-array';\r\nimport {scaleQuantile} from 'd3-scale';\r\n\r\nfunction getDomain({locations}) {\r\n  const domains = {};\r\n  locations.forEach(location => {\r\n    if(domains.hasOwnProperty(location.country_code)) {\r\n        domains[location.country_code].confirmed += location.latest.confirmed\r\n        domains[location.country_code].deaths += location.latest.deaths\r\n    } else {\r\n      domains[location.country_code] = {\r\n        confirmed: location.latest.confirmed,\r\n        deaths: location.latest.deaths,\r\n        last_updated: location.last_updated\r\n      };\r\n    }\r\n  });\r\n  return domains;\r\n}\r\n\r\nexport function updatePercentiles(geoData, covid19Data) {\r\n  const {features} = geoData;\r\n  const domains = getDomain(covid19Data);\r\n  const scale = scaleQuantile()\r\n    .domain(Object.keys(domains).map(key =>  domains[key].confirmed))\r\n    .range(range(9));\r\n  return {\r\n    type: 'FeatureCollection',\r\n    features: features.map(f => {\r\n      let properties = {};\r\n      if( domains[f.properties.ISO_A2]) {\r\n        const confirmed = domains[f.properties.ISO_A2].confirmed;\r\n        properties = {\r\n          ...f.properties,\r\n          name: f.properties.ADMIN,\r\n          hasRecords: true,\r\n          deaths: domains[f.properties.ISO_A2].deaths,\r\n          last_updated: domains[f.properties.ISO_A2].last_updated,\r\n          confirmed,\r\n          percentile: scale(confirmed)\r\n        };\r\n      } else {\r\n        properties = {\r\n          ...f.properties,\r\n          name: f.properties.ADMIN,\r\n          hasRecords: false\r\n        };\r\n      }\r\n      return {...f, properties};\r\n    })\r\n  };\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}